/* This reporter is cerated for chercher.tech, 
you got get permission from chercher.tech for repubishing,
The contributors are :
                    Pavankumar N
                    Vikas Kumar
                    Nagesh
                    Pavankumar K
                    Rahul Kumar
                    Rashmi
*/


var fs     = require('fs'),
    mkdirp = require('mkdirp'),
    _      = require('lodash'),
    path   = require('path'),
    async  = require('async'),
    hat    = require('hat'),
    os    = require('os');

require('string.prototype.startswith');

var UNDEFINED, exportObject = exports, reportDate;


/*********Reguired function goes here start************/

function sanitizeFilename(name){
    name = name.replace(/\s+/gi, '-'); // Replace white space with dash
    return name.replace(/[^a-zA-Z0-9\-]/gi, ''); // Strip any special charactere
}
function trim(str) { return str.replace(/^\s+/, "" ).replace(/\s+$/, "" ); }

function parseDecimalRoundAndFixed(num,dec){
    var d =  Math.pow(10,dec);
    return isNaN((Math.round(num * d) / d).toFixed(dec)) === true ? 0 : (Math.round(num * d) / d).toFixed(dec);
}

function escapeInvalidHtmlChars(str) {
    return str
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}

function rmdir(dir) {
    try {
        var list = fs.readdirSync(dir);
        for (var i = 0; i < list.length; i++) {
            var filename = path.join(dir, list[i]);
            var stat = fs.statSync(filename);

            if (stat.isDirectory()) {
                // rmdir recursively
                rmdir(filename);
            } else {
                // rm fiilename
                fs.unlinkSync(filename);
            }
        }
        fs.rmdirSync(dir);
    }catch (e) { log("problem trying to remove a folder:" + dir); }
}

function getReportDate(){
    if (reportDate === undefined)
        reportDate = new Date();
    return reportDate.toJSON().slice(0,10) + ' ' +
            reportDate.getHours() + '' +
            reportDate.getMinutes() + '' +
            reportDate.getSeconds() + ',' +
            reportDate.getMilliseconds();
}

function getCurrentTime(){
    var dt = new Date();
    var timeString = dt.toJSON().slice(0,10) + " T " + dt.getHours() + "-" + dt.getMinutes() +"-" + dt.getSeconds()+"-"+dt.getUTCMilliseconds()
    return timeString
}
function getCurrentTimeHHMMSS(){
    var dt = new Date();
    var timeString = dt.getHours() + "-" + dt.getMinutes() +"-" + dt.getSeconds()+"-"+dt.getUTCMilliseconds()
    return timeString
}

function getTimeInFormat(dateObject){
    dateObject = dateObject.toJSON().slice(0,10) + " T " + dateObject.getHours() + "-" + dateObject.getMinutes() +"-" + dateObject.getSeconds()+"-"+dateObject.getUTCMilliseconds()
    return dateObject
}

var writeScreenshot = function (data, filename) {
    var stream = fs.createWriteStream("./screenshots/"+filename);
    stream.write(new Buffer(data, 'base64'));
    stream.end();
};


broName=[];
function ChercherTechJasmineReporter(options){

    
    var self = this;
    var numberofStories = 0
    self.screenshotOnFail = options.screenshotOnFail
    self.takeScreenshotsOnCompletionOfSpec = options.takeScreenshotsOnCompletionOfSpec
    self.showSkipped = options.showSkipped === UNDEFINED ? false : options.showSkipped
    self.showLineChart = options.showLineChart === UNDEFINED ? true : options.showLineChart
    self.browser = options.browser
    self.reportName = options.reportName === UNDEFINED ? "chercher tech reports" : options.reportName
    var browserName = "010101"
    var browserVersion = "010101"

    if(self.browser  != UNDEFINED){
        self.browser.getCapabilities().then((c) => {
            let site = {
                
                browserName:c.get('browserName'),
                version:c.get('version'), 
                ssl:c.get('acceptSslCerts'),
                insecure:c.get('acceptInsecureCerts')
                
            };
            let data = JSON.stringify(site);
            fs.writeFileSync('cherchertech.json', data);
            // read the file into raw data
            let rawdata = fs.readFileSync('cherchertech.json');
            // parse the raw data into meaningful JSON format
            let browserDetails = JSON.parse(rawdata);
            browserName = browserDetails["browserName"]
            browserVersion = browserDetails["version"]


        })
        fs.exists("./screenshots", function(exitsOrNot){
            if(!exitsOrNot){
                fs.mkdirSync("screenshots")
            }
        })
    }

    
    

    var htmlCode = ""
    var specCode = ""
    var storyCode = ""
    var jasmineStartTime
    var jasmineEndTime

    var pass = 0
    var fails = 0
    var skips = 0

    var linechartDataFails = ""
    var linechartDataPass = ""
    var linechartDataSkip = ""
    var lineChartStoryData = ""
    var storyNumber = 1
    
    
    
    
    self.jasmineStarted = function(summary) {
    jasmineStartTime = new Date()
    };

    self.suiteStarted = function(suite) {
        
        var suitename = suite.id
        suite._startTime = new Date()
        suite.totalspecs = 0
    };

    
    self.specStarted = function(spec) {
        spec._startTime = new Date();
    };

    self.specDone = function(spec) {
        var stepspresent = 0;
        var passed = false;
        var failed = false;
        var skipped = false;

        spec._endTime = new Date();
    var start = `<ul class='collapsible node-list' data-collapsible='accordion'> <li class='displayed 01010101 node-1x'> <div class='collapsible-header test-node 01010101'> <div class='right test-info'> <span title='Test started time' alt='Test started time' class='test-started-time label green lighten-2 text-white'>${getTimeInFormat(spec._startTime)}</span> <span title='Test ended time' alt='Test ended time' class='test-ended-time label red lighten-2 text-white'>${getTimeInFormat(spec._endTime)}</span> <span title='Time taken to finish' alt='Time taken to finish' class='test-time-taken label blue-grey lighten-2 text-white'>${elapsed(spec._startTime, spec._endTime)}s</span> <span class='test-status label outline capitalize 01010101'>01010101</span> </div><div class='test-node-name'>${escapeInvalidHtmlChars(spec.description)}</div><div class='test-node-desc'></div></div><div class='collapsible-body'> <div class='test-steps'> <table class='bordered table-results'> <thead> <tr> <th>Status</th> <th>Timestamp</th> <th>StepName</th> ${self.browser == undefined ? "" :"<th>Screenshot</th>" } </tr></thead> <tbody>`
        
        
        if(spec.status === "passed"){
            passed= true;
            stepspresent += 1
            pass += 1

            var showOrHide = "hidden"
                if(self.showPassed === true){
                    showOrHide =""
                }    
                
                _.each(spec.passedExpectations, function(expectation){
                    
                    start += "<tr "+showOrHide+"><td class='status pass' title='pass' alt='pass'><i class='mdi-action-check-circle'></i></td>";
                    start +=  "<td class='timestamp'>"+new Date().getSeconds();+"</td>"
                    start += "<td class='step-name'>"+expectation+"</td>"
                    start += "<td class='step-details'>"+"</td>"
                    start += '</tr>';
                });
            
        }else if(spec.status === "failed"){
            stepspresent += 1
            failed = true;
            fails+= 1
            
            
            if (spec.failedExpectations.length > 0 || spec.passedExpectations.length > 0 ){
                
                _.each(spec.failedExpectations, function(expectation){
                    var timeNow = getCurrentTime();
                    if(self.screenshotOnFail && !self.takeScreenshotsOnCompletionOfSpec){
                        if(self.browser != UNDEFINED){
                            self.browser.takeScreenshot().then(function (png) {
                                writeScreenshot(png, timeNow+".png");
                            });
                        }
                    }
                    start += "<tr><td class='status fail' title='fail' alt='fail'><i class='mdi-navigation-cancel'></i></td>";
                    start +=  "<td class='timestamp'>"+getCurrentTimeHHMMSS()+"</td>"
                    start += "<td class='step-name'>"+expectation.message+"</td>"
                    if(self.browser != undefined){
                        start += "<td class='step-details'><a target='_blank' href='./screenshots/"+timeNow+".png'>image</a></td>"
                    }
                    
                    start += '</tr>'
                    
                });
                var showOrHide = "hidden"
                if(self.showPassed === true){
                    showOrHide =""
                }    
                
                _.each(spec.passedExpectations, function(expectation){
                    start += "<tr "+showOrHide+"><td class='status pass' title='pass' alt='pass'><i class='mdi-action-check-circle'></i></td>";
                    start +=  "<td class='timestamp'>"+new Date().getSeconds();+"</td>"
                    start += "<td class='step-name'>"+expectation.message+"</td>"
                    start += "<td class='step-details'>"+"</td>"
                    start += '</tr>';
                });
                
            }
           
        }else if(spec.status === "pending"){
        }else if(spec.status === "disabled"){
            skipped = true
            skips +=1
           
        }
   
        start += `</tbody>
                        </table>
                    </div>
                </div>
                </li>
                </ul>`

                
                    if(failed){
                        start = start.split("01010101").join("fail")
                    }else if(skipped){
                        start = start.split("01010101").join("skip")
                    }else{
                        start = start.split("01010101").join("pass")
                    } 
                   specCode += start
                
        
    }
    self.suiteDone = function(suite) {
        suite._endTime = new Date()
        suite.failed

        if(self.showSkipped){
            
            linechartDataFails += fails +","
            linechartDataPass += pass +","
            linechartDataSkip += skips +","
            numberofStories +=1
        }else{
            if(fails != 0 || pass !=0){
                console.log("*****************************")
                linechartDataFails += fails +","
                linechartDataPass += pass +","
                linechartDataSkip += skips +","
                numberofStories +=1
            }
        }
        
        var status =""
        if(fails > 0){
            status = "fail";
        }else if(pass >0)
        {
            status = "pass";
        }else{
            status ="skip"
        }
        fails=0
        pass=0
        skips=0
        lineChartStoryData += "'S"+storyNumber+"',"
        storyNumber += 1
       if(status != "skip" || self.showSkipped){
        var Code=  `<li class='collection-item test displayed active pass hasChildren'> <div class='test-head'> <span class='test-name'>${suite.description}</span> <span class="test-status label right outline capitalize ${status}">${status}</span> <span class='category-assigned hide'></span> </div><div class='test-body'> <div class='test-info'> <span title='Test started time' alt='Test started time' class='test-started-time label green lighten-1 text-white'>${getTimeInFormat(suite._startTime)}</span> <span title='Test ended time' alt='Test ended time' class='test-ended-time label red lighten-1 text-white'>${getTimeInFormat(suite._endTime)}</span> <span title='Time taken to finish' alt='Time taken to finish' class='test-time-taken label blue-grey lighten-3 text-white'>${elapsed(suite._startTime, suite._endTime)}s</span> </div><div class='test-steps'> <table class='bordered table-results'> <thead> <tr> <th>Status</th> <th>Timestamp</th> <th>Details</th> </tr></thead> <tbody></tbody> </table>`

                storyCode += Code + specCode + `</div>
                </div>
            </li>`
            }
           Code = ""
           specCode=""
    };

    self.jasmineDone = function() {
        jasmineEndTime = new Date()
        var totalJasmineStart = `<!DOCTYPE html> <html> <head> <meta charset='UTF-8'/> <meta name='description' content='CherCher Tech Reporter'/> <meta name='viewport' content='width=device-width, initial-scale=1'/> <meta name='extentx' id='extentx' content=''/> <title>ChercherTech Reports</title> <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,600' rel='stylesheet' type='text/css'> <link href='https://chercher.tech/reporter/chercher-tech.css' type='text/css' rel='stylesheet'/> <style></style> </head> <body class='extent dark hide-overflow'> <div class='navbar-fixed'> <nav> <div class='logo-container'> <a class='logo-content' > <b></b> </a> <a hidden href='#' data-activates='slide-out' class='button-collapse hide-on-large-only'><i class='mdi-navigation-apps'></i></a> </div><ul id='slide-out' class='side-nav fixed hide-on-med-and-down'> <li hidden class='analysis waves-effect'><a href='#!' class='dashboard-view'><i class='mdi-action-track-changes'></i></i>Analysis</a></li></ul> <span class='report-name'>${self.reportName}</span> <span class='report-headline'></span> <ul class='right hide-on-med-and-down nav-right'> <li> <span class='suite-started-time'>${getTimeInFormat(jasmineStartTime)}</span> </li></ul> </nav> </div><div class='container'>`

      if(self.showLineChart){
        totalJasmineStart +=`<!-- line chart starts-->
                <div id='linechart' class='lines'>
                <canvas id="speedChart" height="45"></canvas>
                </div>

            <!-- line chart ends -->

            <script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.js' type='text/javascript'></script>
            <script>
            var speedCanvas = document.getElementById("speedChart");

            Chart.defaults.global.defaultFontFamily = "Lato";
            Chart.defaults.global.defaultFontSize = 12;

            var dataFirst = {
                label: "Failed Tests",
                data: [${linechartDataFails}],
                lineTension: 0.3,
                fill: false,
                borderColor: 'red',
                borderWidth: 3,
                backgroundColor: 'transparent',
                pointBorderColor: 'red',
                pointBackgroundColor: 'lightgreen',
                pointRadius: 3,
                pointHoverRadius: 7,
                pointHitRadius: 15,
                pointBorderWidth: 1,
                pointStyle: 'circle'
            };
            var dataSecond = {
                label: "Passed Tests",
                data: [${linechartDataPass}],
                lineTension: 0.3,
                fill: false,
                borderColor: 'green',
                borderWidth: 6,
                backgroundColor: 'transparent',
                pointBorderColor: 'green',
                pointBackgroundColor: 'lightgreen',
                pointRadius: 3,
                pointHoverRadius: 7,
                pointHitRadius: 15,
                pointBorderWidth: 1,
                pointStyle: 'circle'
            };
            var dataThird = {
                label: "Skipped Tests",
                data: [${linechartDataSkip}],
                lineTension: 0.3,
                fill: false,
                borderColor: 'blue',
                borderWidth: 1,
                backgroundColor: 'transparent',
                pointBorderColor: 'blue',
                pointBackgroundColor: 'lightgreen',
                pointRadius: 3,
                pointHoverRadius: 7,
                pointHitRadius: 15,
                pointBorderWidth: 1,
                pointStyle: 'circle'
            };


            var speedData = {
            labels: [${lineChartStoryData}],
            datasets: [dataFirst, dataSecond, dataThird]
            };

            var chartOptions = {
            legend: {
                display: true,
                position: 'top',
                labels: {
                boxWidth: 80,
                fontColor: 'white'
                }
            }
            };

            var lineChart = new Chart(speedCanvas, {
            type: 'line',
            data: speedData,
            options: chartOptions
            });
            </script>`
        }



        totalJasmineStart +=` <h3>Execution Statistics</h3> <div id='dashboard-view' class='row'> <div class='time-totals'> <div class='col l2 m4 s12'> <div class='card suite-total-time-current'> <span class='panel-name'>Total Stories</span> <span class='suite-total-time-current-value panel-lead'>${numberofStories}</span> </div></div><div class='col l2 m4 s6'> <div class='card suite-total-tests'> <span class='panel-name'>Total Tests</span> <span class='total-tests'> <span class='panel-lead'></span> </span> </div></div><div class='col l2 m4 s6'> <div class='card suite-total-steps'> <span class='panel-name'>Total Verifications</span> <span class='total-steps'> <span class='panel-lead'></span> </span> </div></div><div class='col l2 m4 s12'> <div class='card suite-total-time-overall'> <span class='panel-name'>Execution Duration</span> <span class='suite-total-time-overall-value panel-lead'>${elapsed(jasmineStartTime, jasmineEndTime)}</span> </div></div><div class='col l2 m4 s6 suite-start-time'> <div class='card accent green-accent'> <span class='panel-name'>Start</span> <span class='panel-lead suite-started-time'>${getTimeInFormat(jasmineStartTime)}</span> </div></div><div class='col l2 m4 s6 suite-end-time'> <div class='card accent pink-accent'> <span class='panel-name'>End</span> <span class='panel-lead suite-ended-time'>${getTimeInFormat(jasmineEndTime)}</span> </div></div></div><div class='charts'> <div class='col s12 m6 l3 fh'> <div class='card-panel'> <div> <span class='panel-name'>Test Details</span> </div><div class='chart-box'> <canvas class='text-centered' id='test-analysis'></canvas> </div><div> <span class='weight-light'><span class='t-pass-count weight-normal'></span> test(s) passed</span> </div><div> <span class='weight-light'><span class='t-fail-count weight-normal'></span> test(s) failed, <span class='t-others-count weight-normal'></span> others</span> </div></div></div><div class='col s12 m6 l3 fh'> <div class='card-panel'> <div> <span class='panel-name'>Verification Details</span> </div><!--<div class='panel-setting modal-trigger step-status-filter right'> <a href='#step-status-filter'><i class='mdi-navigation-more-vert text-md'></i></a> </div>--> <div class='chart-box'> <canvas class='text-centered' id='step-analysis'></canvas> </div><div> <span class='weight-light'><span class='s-pass-count weight-normal'></span> verification(s) passed </span> </div><div> <span class='weight-light'><span class='s-fail-count weight-normal'></span> verification(s) failed, <span class='s-others-count weight-normal'></span> others</span> </div></div></div><div class='col s12 m12 l3 fh'> <div class='card-panel'> <span class='panel-name'>Pass Percentage</span> <span class='pass-percentage panel-lead'></span> <div class='progress light-blue lighten-3'> <div class='determinate light-blue'></div></div></div></div></div>
        <div class='system-view'> <div class='col l3 m12 s12'> <div class='card-panel'> <span class='panel-name'>Environment Details</span> <table> <thead> <tr> <th>Param</th> <th>Value</th> </tr></thead> <tbody> <tr> <td>User Name</td><td>${os.userInfo().username}</td></tr><tr> <td>OS</td><td>${os.platform()}</td></tr><tr> <td>Host Name</td><td>${os.hostname()}</td></tr><tr> <td>Cherchertech Reporter version</td><td>0.0.1</td></tr><tr> <td>Browser Name</td><td>${browserName.replace("010101", "NA")}</td></tr><tr> <td>Browser version</td><td>${browserVersion.replace("010101", "NA")}</td></tr></tbody> </table> </div></div></div>
     <div><h3>User Story and Test case details</h3></div><div id='test-view' class='row _addedTable'> <div class='col _addedCell1'> <div class='contents'> <div class='card-panel heading'> <h5>User Stories</h5> </div><div class='card-panel filters'> <div> <div id='tests-toggle' class='heading' style="display: flex; list-style: none;border: none !important;"> <li class='pass'><a class='test-status label outline capitalize pass' href='#!'>Pass</a></li><li class='fail'><a href='#!' class='test-status label outline capitalize fail'>Fail</a></li><li class='skip'><a href='#!' class='test-status label outline capitalize skip'>Skip</a></li><li class='clear'><a href='#!' class='test-status label outline capitalize clear'>Clear Filters</a></li></div></div><div hidden> <a hidden id='refreshCharts' alt='Refresh Charts on Filters' title='Refresh Charts on Filters' class='enabled'><i class='mdi-navigation-refresh icon'></i></i></a> </div></div><div class='card-panel no-padding-h no-padding-v no-margin-v'> <div class='wrapper'> <ul id='test-collection' class='test-collection'>`

        var jasmineEnd =` </ul> </div></div></div></div><div id='test-details-wrapper' class='col _addedCell2'> <div class='contents'> <div class='card-panel details-view'> <h5 class='details-name'></h5> <div class='details-container'></div></div></div></div></div></div></div>
      
	  
	  
<!-- /filter for step status -->
<script src='https://chercher.tech/reporter/chercher-tech.js' type='text/javascript'></script>
<!-- /tests -->
<!--PLACE ABOVE SHPULD BE EDITED-->
<script>
$(document).ready(function() { $('.logo-content b').html('ChercherTech Reports'); });
$(document).ready(function() { $('.logo-content').attr('href', 'https://chercher.tech/protractor/chercher-tech-jasmine-reporter'); });
$(document).ready(function() {
  $('.dashboard-view').click();
});
</script>


</body>
</html>`
  
fs.writeFile(self.reportName +"  "+getTimeInFormat(new Date())+'.html', totalJasmineStart+storyCode+jasmineEnd, function(err, data){
    if (err) console.err(err);
    console.log("Report Generated.");
});


fs.stat('cherchertech.json', function(err, stat) {
    if(err == null) {
        fs.unlinkSync('cherchertech.json');
    }
});

        
    };
}


function elapsed(start, end) { return (end - start)/1000; }
function isFailed(obj) { return obj.status === "failed"; }
function isSkipped(obj) { return obj.status === "pending"; }
function isDisabled(obj) { return obj.status === "disabled"; }


function extend(dupe, obj) { // performs a shallow copy of all props of `obj` onto `dupe`
    for (var prop in obj) {
        if (obj.hasOwnProperty(prop)) {
            dupe[prop] = obj[prop];
        }
    }
    return dupe;
}

function getQualifiedFilename(path, filename, separator) {
    if (path && path.substr(-1) !== separator && filename.substr(0) !== separator) {
        path += separator;
    }
    return path + filename;
}
function log(str) {
    var con = global.console || console;
    if (con && con.log) {
        con.log(str);
    }
}

module.exports = ChercherTechJasmineReporter;
